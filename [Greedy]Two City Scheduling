There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].
Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.

example:
Input: [[10,20],[30,200],[400,50],[30,20]]
Output: 110

Soultion:
int twoCitySchedCost(vector<vector<int>>& costs) {
        ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
        int n = costs.size();
        
        sort(costs.begin(), costs.end(), [](auto& a, auto& b) -> bool {return a[0]-a[1] < b[0]-b[1];}); //lambda function c++ or we can use comparator.
        
        int ans = 0;
        int i , j;
        for( i = 0, j = n-1; i < j; i++, j--)
            ans += costs[i][0] + costs[j][1];
        
        return ans;
        
}
